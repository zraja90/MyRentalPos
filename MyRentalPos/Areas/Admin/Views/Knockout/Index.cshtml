@{
    ViewBag.Title = "Index";
}
<script src="/Scripts/jquery.pnotify.js"></script>

<script src="/Scripts/FuelUx/wizard.js"></script>
<link rel="stylesheet" href="/Content/jquery.pnotify.default.css" />
<link rel="stylesheet" href="/Content/jquery.pnotify.default.icons.css" />
<script src="/Scripts/knockout.validation.js"></script>
<h3>Create Your Store</h3>
<div class="wizard" id="mywizard">
    <ul class="steps">
        <li data-target="#step1" class="active">
            <span class="badge badge-info">1</span>Step 1
            <span class="chevron"></span>
        </li>
        <li data-target="#step2">
            <span class="badge badge-info">2</span>Step 2
            <span class="chevron"></span>
        </li>
    </ul>
</div>
<div class="step-content">
    <div class="step-pane active" id="step1">
        @Html.Partial("CreateStore","Store")

    </div>
    <div class="step-pane" id="step2">Step 2</div>
</div>


@*<textarea name="tasks" data-bind="value: ko.toJSON(store)"></textarea>*@
<div class="hide">
    <form data-bind="submit: addStoreAddress" class="form-horizontal">

        <div class="control-group">
            <label class="control-label">
                Address
            </label>
            <div class="controls">
                <input type="text" data-bind="value: newAddressText" placeholder="Street Address" required="required" />
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">
                City
            </label>
            <div class="controls">
                <input type="text" data-bind="value: newCityText" placeholder="Add City" />
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">
                State
            </label>
            <div class="controls">
                <input type="text" data-bind="value: newStateText" placeholder="Add State" />
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">
                Zip Code
            </label>
            <div class="controls">
                <input type="text" data-bind="value: newZipCodeText" placeholder="Add Zip Code" />
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">
                Phone Number
            </label>
            <div class="controls">
                <input type="text" data-bind="value: newPhoneNumberText" placeholder="Add Phone Number" />
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">
                Fax Number
            </label>
            <div class="controls">
                <input type="text" data-bind="value: newFaxNumberText" placeholder="Add Fax Number" />
            </div>
        </div>
        <button type="submit" class="btn">Add Location</button>
    </form>
    <ul class="unstyled" data-bind="foreach: addresses, visible: addresses().length > 0">
        <li>
            <input data-bind="value: address" /></li>
        <li>
            <input data-bind="value: city" /></li>
        <li>
            <input data-bind="value: state" /></li>
        <li>
            <input data-bind="value: zipcode" /></li>
        <li>
            <input data-bind="value: phonenumber" /></li>
        <li>
            <input data-bind="value: faxnumber" /></li>
        <li>
            <a href="#" data-bind="click: $parent.removeTask">Delete</a>
        </li>
    </ul>


</div>
<div class="errorFill"></div>
<script>
    //$(function () {

    function StoreAddress(data) {
        this.address = ko.observable(data.address);
        this.city = ko.observable(data.city);
        this.state = ko.observable(data.state);
        this.zipcode = ko.observable(data.zipcode);
        this.phonenumber = ko.observable(data.phonenumber);
        this.faxnumber = ko.observable(data.faxnumber);
    }
    function StoreData(data) {
        this.StoreName = ko.observable(data.storeName);
        this.BaseUrl = ko.observable(data.baseurl);
        this.Image = ko.observable(data.image);

        this.IsActive = ko.observable(data.active);
        this.Owner = ko.observable(data.owner);
        this.EmailAddress = ko.observable(data.email);
    }

    function StoreViewModel() {
        // Data
        var self = this;
        self.addresses = ko.observableArray([]);
        self.store = ko.observableArray([]);
        //Address Fields
        self.newAddressText = ko.observable();
        self.newCityText = ko.observable();
        self.newStateText = ko.observable();
        self.newZipCodeText = ko.observable();
        self.newPhoneNumberText = ko.observable();
        self.newFaxNumberText = ko.observable();
        //Store Fields
        self.newStoreNameText = ko.observable().extend({
            required: {
                message: "Store Name not valid"
            }
        });
        self.newBaseUrlText = ko.observable();
        self.newImageText = ko.observable();


        self.newIsActiveText = ko.observable();
        self.newOwnerText = ko.observable();
        self.newEmailText = ko.observable();
        // Operations
        var validationOptions = { insertMessages: true, decorateElement: true, errorElementClass: 'errorFill' };
        ko.validation.init(validationOptions);

        StoreViewModel.errors = ko.validation.group(StoreViewModel);
        self.addStoreAddress = function () {
            self.addresses.push(new StoreAddress(
                {
                    address: this.newAddressText(),
                    city: this.newCityText(),
                    state: this.newStateText(),
                    zipcode: this.newZipCodeText(),
                    phonenumber: this.newPhoneNumberText(),
                    faxnumber: this.newFaxNumberText(),
                    storeName: this.newStoreNameText(),
                    baseurl: this.newBaseUrlText(),
                    image: this.newImageText(),

                    active: this.newIsActiveText(),
                    owner: this.newOwnerText(),
                    email: this.newEmailText()
                }));
        };
        self.createStore = function () {
            //console.log($('#createStoreForm').serialize());
            //if ($("#createStoreForm").valid()) {

           /* self.store.push(
                new StoreData(
                    {
                        storeName: this.newStoreNameText(),
                        baseurl: this.newBaseUrlText(),
                        image: this.newImageText(),
                        active: this.newIsActiveText(),
                        owner: this.newOwnerText(),
                        email: this.newEmailText()
                    }));*/
            debugger;
            if(StoreViewModel.errors().length==0) {
                alert('thank you');
            } else {
                alert('error');
                StoreViewModel.errors.showAllMessages();
            }
            /* $.ajax("/Admin/Knockout/CreateStore", {
                data: ko.toJSON({ model: self.store._latestValue[0] }),
                type: "post",
                contentType: "application/json",
                success: function (result) {
                    $.pnotify({
                        title: result,
                        text: '',
                        type: 'success',
                    });
                    $('#mywizard').wizard('next');
                    $('#mywizard .steps li').each(function () {
                        if ($(this).attr('class') == 'completed') {
                            $(this).attr('data-target', '');
                        }

                    });
                }
            });*/
        };

        //};
        self.removeTask = function (addresses) { self.addresses.remove(addresses); };
    };
    ko.applyBindings(new StoreViewModel());
    // });
</script>
