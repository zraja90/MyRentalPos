<form data-bind="submit: createStore" id="createStoreForm" class="form-horizontal">
    <div class="control-group">
        <label class="control-label">
            Store Name
        </label>
        <div class="controls">
            <input type="text" data-bind="value: newStoreNameText" id="newStoreNameText" name="newStoreNameText" placeholder="Store Name" required="" />

        </div>
    </div>
    <div class="control-group">
        <label class="control-label">
            Store URL
        </label>
        <div class="controls">
            <input type="text" data-bind="value: newBaseUrlText" placeholder="Store URL" required="" />
        </div>
    </div>
    <div class="control-group">
        <label class="control-label">
            Store Logo
        </label>
        <div class="controls">
            <input type="text" data-bind="value: newImageText" placeholder="Store Logo" required="" />
        </div>
    </div>
    <div class="control-group">
        <label class="control-label">
            Store Owner
        </label>
        <div class="controls">
            <input type="text" data-bind="value: newOwnerText" placeholder="Store Owner" required="" />
        </div>
    </div>
    <div class="control-group">
        <label class="control-label">
            Owner Email Address
        </label>
        <div class="controls">
            <input type="email" data-bind="value: newEmailText" placeholder="Store Email Address" required="" />
        </div>
    </div>
    <div class="control-group">
        <div class="controls">
            <label class="checkbox">
                <input type="checkbox" data-bind="checked: newIsActiveText" />
                Is Active? 
            </label>
            <button type="submit" id="wizard-next" class="btn btn-primary">Create</button>
        </div>
    </div>

</form>

<script>
    $(function () {
        $('#createStoreForm').validate();

        //http://docs.jquery.com/Plugins/Validation
        $('#createStoreForm').validate();
        function StoreData(data) {
            this.StoreName = ko.observable(data.storeName);
            this.BaseUrl = ko.observable(data.baseurl);
            this.Image = ko.observable(data.image);

            this.IsActive = ko.observable(data.active);
            this.Owner = ko.observable(data.owner);
            this.EmailAddress = ko.observable(data.email);
        }

        //ko.extenders.required = function (target, overrideMessage) {
        //    //add some sub-observables to our observable
        //    target.hasError = ko.observable();
        //    target.validationMessage = ko.observable();

        //    //define a function to do validation
        //    function validate(newValue) {
        //        target.hasError(newValue ? false : true);
        //        target.validationMessage(newValue ? "" : overrideMessage || "This fields is required");
        //    }

        //    //initial validation
        //    validate(target());

        //    //validate whenever the value changes
        //    target.subscribe(validate);

        //    //return the original observable
        //    return target;
        //};

        function StoreViewModel() {
            // Data
            var self = this;
            self.store = ko.observableArray([]);
            self.newFaxNumberText = ko.observable();
            //Store Fields
            self.newStoreNameText = ko.observable();
            self.newBaseUrlText = ko.observable();
            self.newImageText = ko.observable();
            self.newIsActiveText = ko.observable();
            self.newOwnerText = ko.observable();
            self.newEmailText = ko.observable();
            // Operations

            self.createStore = function () {
                $('#createStoreForm').validate();
                //console.log($('#createStoreForm').serialize());
                //if ($("#createStoreForm").valid()) {

                /* self.store.push(
                     new StoreData(
                         {
                             storeName: this.newStoreNameText(),
                             baseurl: this.newBaseUrlText(),
                             image: this.newImageText(),
                             active: this.newIsActiveText(),
                             owner: this.newOwnerText(),
                             email: this.newEmailText()
                         }));*/
                debugger;

                if ($("#createStoreForm").valid()) {
                    alert('true');
                } else {
                    alert('false');
                    $('#createStoreForm').showErrors();
                }


                //if (StoreViewModel.isValid()) {
                //    if (StoreViewModel.errors().length == 0) {

                //    } else {
                //        alert('error');
                //        StoreViewModel.errors.showAllMessages();
                //    }
                //}
                /* $.ajax("/Admin/Knockout/CreateStore", {
                    data: ko.toJSON({ model: self.store._latestValue[0] }),
                    type: "post",
                    contentType: "application/json",
                    success: function (result) {
                        $.pnotify({
                            title: result,
                            text: '',
                            type: 'success',
                        });
                        $('#mywizard').wizard('next');
                        $('#mywizard .steps li').each(function () {
                            if ($(this).attr('class') == 'completed') {
                                $(this).attr('data-target', '');
                            }
    
                        });
                    }
                });*/
            };

            //};

        };
        ko.applyBindings(new StoreViewModel());
    });
</script>
