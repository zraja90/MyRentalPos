@model MyRentalPos.Areas.Admin.Models.Store.CreateStoreModel


<form data-bind="submit: createStore" id="createStoreForm" class="form-horizontal">
    <div class="control-group">
        <label class="control-label">
            Store Name
        </label>
        <div class="controls">
            <input type="text" data-bind="value: newStoreNameText" id="newStoreNameText" name="newStoreNameText" placeholder="Store Name" />
        </div>
    </div>
    <div class="control-group">
        <label class="control-label">
            Store URL
        </label>
        <div class="controls">
            <input type="text" data-bind="value: newBaseUrlText" name="newBaseUrlText" placeholder="Store URL" />
        </div>
    </div>
    <div class="control-group">
        <label class="control-label">
            Store Logo
        </label>
        <div class="controls">
            <input type="text" data-bind="value: newImageText" name="newImageText" placeholder="Store Logo" />
        </div>
    </div>
    <div class="control-group">
        <label class="control-label">
            Store Owner
        </label>
        <div class="controls">
            <input type="text" data-bind="value: newOwnerText" name="newOwnerText" placeholder="Store Owner" />
        </div>
    </div>
    <div class="control-group">
        <label class="control-label">
            Owner Email Address
        </label>
        <div class="controls">
            <input type="email" data-bind="value: newEmailText" name="newEmailText" placeholder="Store Email Address" />
        </div>
    </div>
    <div class="control-group">
        <div class="controls">
            <label class="checkbox">
                <input type="checkbox" data-bind="checked: newIsActiveText" name="newIsActiveText" />
                Is Active? 
            </label>
            <button type="submit" id="createStoreButton" class="btn btn-primary">Create</button>
            <button type="button" id="btnWizardNext" class="hide btn btn-primary">Next Step</button>
        </div>
    </div>

</form>

<script>
    $('#createStoreForm').validate({
        rules: {
            newStoreNameText: { required: true },
            newBaseUrlText: { required: true },
            newImageText: { required: true },
            newOwnerText: { required: true },
            newEmailText: { required: true }

        },
        messages: {
            newStoreNameText: "Store Name is required",
            newBaseUrlText: "Store Url is required",
            newImageText: "Store logo is required",
            newOwnerText: "Owner name is required",
            newEmailText: "Please enter a valid email address"
        },
        errorElement: "span",
        
    });
    function StoreData(data) {
        debugger;
        this.StoreName = ko.observable(data.storeName);
        this.BaseUrl = ko.observable(data.baseurl);
        this.Image = ko.observable(data.image);

        this.IsActive = ko.observable(data.active);
        this.Owner = ko.observable(data.owner);
        this.EmailAddress = ko.observable(data.email);
    }

    var initialdata = @Html.Raw(Model.JsonModel);
    debugger;
    function StoreViewModel(data) {
        // Data
        var self = this;
        self.store = ko.observableArray([]);
        self.newFaxNumberText = ko.observable();
        //Store Fields
        
        self.newStoreNameText = ko.observable();
        self.newBaseUrlText = ko.observable();
        self.newImageText = ko.observable();
        self.newIsActiveText = ko.observable();
        self.newOwnerText = ko.observable();
        self.newEmailText = ko.observable();
        // Operations

        self.createStore = function () {

            if ($("#createStoreForm").valid()) {
                self.store.push(
                    new StoreData(
                        {
                            storeName: this.newStoreNameText(),
                            baseurl: this.newBaseUrlText(),
                            image: this.newImageText(),
                            active: this.newIsActiveText(),
                            owner: this.newOwnerText(),
                            email: this.newEmailText()
                        }));
                $('#mywizard').wizard('next');
                debugger;
                $('#mywizard .steps li').each(function() {
                    debugger;
                    if ($(this).attr('class') == 'complete') {
                        $(this).attr('data-target', '');
                    }
                });
                /*$.ajax("/Admin/Knockout/CreateStore", {
                    data: ko.toJSON({ model: self.store._latestValue[0] }),
                    type: "post",
                    contentType: "application/json",
                    success: function (result) {
                        $.pnotify({
                            title: result,
                            text: '',
                            type: 'success',
                        });
                        $('#mywizard').wizard('next');
                        $('#mywizard .steps li').each(function () {
                            if ($(this).attr('class') == 'complete') {
                                $(this).attr('data-target', '');
                            }

                        });
                    }
                });*/
            };
        };
    };
    ko.applyBindings(new StoreViewModel(initialdata));

</script>
